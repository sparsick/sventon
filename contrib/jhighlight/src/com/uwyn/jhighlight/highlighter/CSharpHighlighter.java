/* The following code was generated by JFlex 1.4.1 on 02/02/08 19:43 */

/*
 * Copyright 2008 Gábor Fehér <feherga@gmail.com>
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>.
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 * $Id$
 */
package com.uwyn.jhighlight.highlighter;

import java.io.Reader;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 02/02/08 19:43 from the specification file
 * <tt>/home/gabor/NetBeansProjects/jhighlight-repo/trunk/src/com/uwyn/jhighlight/highlighter/CSharpHighlighter.flex</tt>
 */
public class CSharpHighlighter implements ExplicitStateHighlighter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_DIRECTIVE = 2;
  public static final int IN_COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\14\1\0\1\0\23\0\1\0\1\57\1\26\1\66"+
    "\1\0\1\57\1\60\1\24\1\55\1\55\1\56\1\16\1\55\1\4"+
    "\1\55\1\37\1\11\11\36\1\55\1\55\1\64\1\63\1\65\1\62"+
    "\1\1\3\35\1\17\1\15\1\17\5\2\1\7\1\22\7\2\1\5"+
    "\2\2\1\13\2\2\1\55\1\25\1\55\1\57\1\2\1\0\1\27"+
    "\1\30\1\41\1\21\1\42\1\20\1\53\1\46\1\45\1\50\1\51"+
    "\1\10\1\23\1\31\1\47\1\44\1\2\1\32\1\40\1\33\1\6"+
    "\1\34\1\43\1\12\1\52\1\54\1\55\1\61\1\55\1\62\53\0"+
    "\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0"+
    "\u013f\2\31\0\162\2\4\0\14\2\16\0\5\2\11\0\1\2\213\0"+
    "\1\2\13\0\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0"+
    "\54\2\1\0\46\2\1\0\5\2\4\0\202\2\10\0\105\2\1\0"+
    "\46\2\2\0\2\2\6\0\20\2\41\0\46\2\2\0\1\2\7\0"+
    "\47\2\110\0\33\2\5\0\3\2\56\0\32\2\5\0\13\2\25\0"+
    "\12\3\4\0\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0"+
    "\2\2\12\3\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0"+
    "\3\2\60\0\46\2\13\0\1\2\u0152\0\66\2\3\0\1\2\22\0"+
    "\1\2\7\0\12\2\4\0\12\3\25\0\10\2\2\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\36\0"+
    "\2\2\1\0\3\2\4\0\12\3\2\2\23\0\6\2\4\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2"+
    "\37\0\4\2\1\0\1\2\7\0\12\3\2\0\3\2\20\0\11\2"+
    "\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2"+
    "\3\0\1\2\22\0\1\2\17\0\2\2\4\0\12\3\25\0\10\2"+
    "\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2"+
    "\3\0\1\2\36\0\2\2\1\0\3\2\4\0\12\3\1\0\1\2"+
    "\21\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2"+
    "\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0\10\2"+
    "\1\0\3\2\55\0\11\3\25\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\12\2\1\0\5\2\46\0\2\2\4\0\12\3\25\0\10\2"+
    "\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2"+
    "\40\0\1\2\1\0\2\2\4\0\12\3\25\0\10\2\1\0\3\2"+
    "\1\0\27\2\1\0\20\2\46\0\2\2\4\0\12\3\25\0\22\2"+
    "\3\0\30\2\1\0\11\2\1\0\1\2\2\0\7\2\72\0\60\2"+
    "\1\0\2\2\14\0\7\2\11\0\12\3\47\0\2\2\1\0\1\2"+
    "\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2"+
    "\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2"+
    "\1\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\3"+
    "\2\0\2\2\42\0\1\2\37\0\12\3\26\0\10\2\1\0\42\2"+
    "\35\0\4\2\164\0\42\2\1\0\5\2\1\0\2\2\25\0\12\3"+
    "\6\0\6\2\112\0\46\2\12\0\51\2\7\0\132\2\5\0\104\2"+
    "\5\0\122\2\6\0\7\2\1\0\77\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\1\2\1\0\4\2\2\0\47\2\1\0\1\2"+
    "\1\0\4\2\2\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\7\2\1\0\27\2"+
    "\1\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\47\2"+
    "\1\0\23\2\16\0\11\3\56\0\125\2\14\0\u026c\2\2\0\10\2"+
    "\12\0\32\2\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2"+
    "\16\0\22\2\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2"+
    "\4\0\1\2\3\0\12\3\46\0\12\3\6\0\130\2\10\0\51\2"+
    "\127\0\35\2\51\0\12\3\36\2\2\0\5\2\u038b\0\154\2\224\0"+
    "\234\2\4\0\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0"+
    "\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0"+
    "\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0"+
    "\7\2\164\0\1\2\15\0\1\2\202\0\1\2\4\0\1\2\2\0"+
    "\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0"+
    "\5\2\u0ebb\0\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0"+
    "\3\2\1\0\132\2\1\0\4\2\5\0\50\2\4\0\136\2\21\0"+
    "\30\2\70\0\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0"+
    "\u2ba4\2\u215c\0\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2\5\0"+
    "\1\2\1\0\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0"+
    "\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0"+
    "\66\2\50\0\14\2\164\0\5\2\1\0\207\2\23\0\12\3\7\0"+
    "\32\2\6\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0"+
    "\6\2\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\3\2\1\3\2\2\1\4\1\2"+
    "\1\3\12\2\1\4\1\3\10\2\1\5\6\3\1\2"+
    "\1\1\1\2\1\4\1\2\1\4\1\3\5\2\1\0"+
    "\2\4\1\0\2\4\5\2\1\6\1\0\1\4\3\0"+
    "\1\4\1\2\1\6\15\2\1\1\1\7\22\2\1\6"+
    "\5\2\1\3\10\0\1\1\1\10\4\4\10\2\3\4"+
    "\3\2\1\6\4\2\1\11\3\0\1\12\1\0\1\12"+
    "\2\4\42\2\1\13\4\2\13\0\3\4\4\2\1\13"+
    "\3\4\7\2\3\0\2\12\2\4\24\2\6\0\1\14"+
    "\1\4\3\2\3\0\16\2\3\0\1\2\3\0\6\2"+
    "\2\0\4\2\1\0\3\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\245\0\u06e0\0\u0717\0\u074e\0\245\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u0226\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\245\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\245\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u08cf\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u0226\0\u10f9\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658"+
    "\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810"+
    "\0\u0226\0\u1847\0\u0226\0\u187e\0\u08cf\0\u18b5\0\u18ec\0\u1923"+
    "\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93"+
    "\0\u0226\0\u1cca\0\u1d01\0\u1d38\0\u0d1b\0\u1d6f\0\u1da6\0\u1ddd"+
    "\0\u0d1b\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116"+
    "\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce"+
    "\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e"+
    "\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u0861\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\u29ae\0\u29e5\0\u08cf\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8"+
    "\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0"+
    "\0\u2ce7\0\u0d52\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9"+
    "\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1"+
    "\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u0226\0\u3322"+
    "\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da"+
    "\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692"+
    "\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a"+
    "\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02"+
    "\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba"+
    "\0\u3bf1\0\u3c28\0\u3c5f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\6\1\10\1\6"+
    "\1\11\1\12\2\6\1\13\1\6\1\14\1\6\1\15"+
    "\1\16\2\6\1\17\1\4\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\6\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\6\1\37\3\6\1\40"+
    "\1\6\1\41\2\42\1\43\1\44\1\45\1\42\1\46"+
    "\1\47\1\50\56\51\1\52\10\51\67\13\11\0\1\53"+
    "\24\0\1\53\32\0\1\54\2\0\4\54\1\53\2\54"+
    "\1\0\1\54\1\0\5\54\3\0\7\54\1\53\1\0"+
    "\15\54\14\0\7\54\1\55\2\54\1\0\1\54\1\0"+
    "\5\54\3\0\7\54\1\55\1\0\15\54\16\0\1\56"+
    "\4\0\1\53\24\0\1\53\24\0\1\56\1\0\1\56"+
    "\3\0\6\54\1\57\1\55\2\54\1\0\1\54\1\0"+
    "\5\54\3\0\2\54\1\60\4\54\1\55\1\0\1\61"+
    "\4\54\1\62\7\54\14\0\7\54\1\55\2\54\1\0"+
    "\1\54\1\0\5\54\3\0\7\54\1\55\1\0\7\54"+
    "\1\63\5\54\12\0\5\64\2\65\2\66\1\27\2\67"+
    "\1\0\1\70\1\64\5\71\12\64\1\27\3\64\1\70"+
    "\24\64\100\0\1\53\4\0\1\56\17\0\1\53\24\0"+
    "\1\56\5\0\6\54\1\72\1\55\2\54\1\0\1\54"+
    "\1\0\5\54\3\0\1\73\6\54\1\55\1\0\5\54"+
    "\1\74\1\54\1\75\5\54\14\0\7\54\1\55\2\54"+
    "\1\0\1\54\1\0\5\54\3\0\7\54\1\55\1\0"+
    "\2\54\1\76\4\54\1\77\5\54\12\0\11\100\1\101"+
    "\2\100\1\0\7\100\1\0\1\102\10\100\1\101\30\100"+
    "\1\103\1\104\7\103\1\105\2\103\1\0\7\103\2\0"+
    "\10\103\1\105\30\103\2\0\7\54\1\55\2\54\1\0"+
    "\1\54\1\0\5\54\3\0\1\54\1\106\5\54\1\55"+
    "\1\0\1\107\14\54\14\0\7\54\1\55\2\54\1\0"+
    "\1\54\1\0\5\54\3\0\1\110\2\54\1\111\3\54"+
    "\1\55\1\0\7\54\1\112\2\54\1\113\2\54\14\0"+
    "\4\54\1\114\2\54\1\55\2\54\1\0\1\54\1\0"+
    "\5\54\3\0\1\115\6\54\1\55\1\0\2\54\1\116"+
    "\12\54\14\0\7\54\1\55\2\54\1\0\1\54\1\0"+
    "\5\54\3\0\7\54\1\55\1\0\2\54\1\117\12\54"+
    "\14\0\7\54\1\55\2\54\1\0\1\54\1\0\5\54"+
    "\3\0\3\54\1\120\3\54\1\55\1\0\6\54\1\121"+
    "\3\54\1\122\2\54\14\0\7\54\1\55\2\54\1\0"+
    "\1\54\1\0\5\54\3\0\7\54\1\55\1\0\5\54"+
    "\1\123\1\54\1\124\5\54\12\0\5\64\2\65\2\66"+
    "\1\27\2\64\1\0\1\70\1\64\5\71\12\64\1\27"+
    "\3\64\1\70\24\64\11\0\1\53\24\0\1\53\1\125"+
    "\16\0\1\126\4\0\1\56\5\0\7\54\1\55\2\54"+
    "\1\0\1\54\1\0\5\54\3\0\1\54\1\127\2\54"+
    "\1\130\2\54\1\55\1\0\2\54\1\131\1\132\1\54"+
    "\1\133\1\134\6\54\14\0\6\54\1\135\1\55\2\54"+
    "\1\0\1\54\1\0\5\54\3\0\1\136\6\54\1\55"+
    "\1\0\6\54\1\137\1\140\5\54\14\0\6\54\1\110"+
    "\1\55\1\141\1\54\1\0\1\54\1\0\5\54\3\0"+
    "\2\54\1\142\2\54\1\143\1\54\1\55\1\0\15\54"+
    "\14\0\7\54\1\55\2\54\1\0\1\54\1\0\5\54"+
    "\3\0\7\54\1\55\1\0\6\54\1\144\6\54\14\0"+
    "\4\54\1\145\2\54\1\55\2\54\1\0\1\54\1\0"+
    "\5\54\3\0\1\146\2\54\1\147\3\54\1\55\1\0"+
    "\15\54\14\0\7\54\1\55\2\54\1\0\1\54\1\0"+
    "\1\54\1\107\2\54\1\150\3\0\2\54\1\151\4\54"+
    "\1\55\1\0\1\107\14\54\14\0\4\54\1\152\2\54"+
    "\1\55\2\54\1\0\1\54\1\0\5\54\3\0\1\54"+
    "\1\153\3\54\1\154\1\54\1\55\1\0\4\54\1\155"+
    "\10\54\14\0\7\54\1\55\2\54\1\0\1\54\1\0"+
    "\5\54\3\0\7\54\1\55\1\0\7\54\1\156\5\54"+
    "\23\0\1\53\24\0\1\53\24\0\1\56\14\0\1\53"+
    "\24\0\1\53\21\0\1\56\2\0\1\56\14\0\1\53"+
    "\24\0\1\53\22\0\1\56\1\0\1\56\14\0\1\53"+
    "\24\0\1\53\24\0\1\56\1\157\13\0\1\53\24\0"+
    "\1\53\24\0\1\56\1\0\1\157\7\0\1\160\1\0"+
    "\1\161\1\53\7\0\1\162\10\0\1\163\3\0\1\53"+
    "\3\0\1\164\1\165\1\0\1\166\21\0\56\51\1\167"+
    "\10\51\37\170\1\171\27\170\11\0\1\53\3\0\1\172"+
    "\1\0\5\173\12\0\1\53\3\0\1\172\26\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\15\54"+
    "\14\0\7\54\1\55\2\54\1\0\1\174\1\0\5\175"+
    "\3\0\7\54\1\55\1\0\2\54\1\174\12\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\7\54\1\176\5\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\1\177\1\200\13\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\5\54\1\201\1\202\6\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\2\54\1\203\5\54\1\0\15\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\2\54"+
    "\1\204\5\54\1\0\1\54\1\205\13\54\21\0\2\173"+
    "\1\53\24\0\1\53\35\0\2\173\2\0\1\53\24\0"+
    "\1\53\41\0\1\206\3\0\1\207\1\0\3\207\5\0"+
    "\2\207\4\0\1\207\1\206\2\0\2\207\30\0\1\210"+
    "\4\0\1\53\4\0\1\210\5\173\12\0\1\53\32\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\7\54\1\211\5\54\14\0\6\54\1\110\3\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\15\54\14\0"+
    "\10\54\1\212\1\54\1\0\1\54\1\0\5\54\3\0"+
    "\2\54\1\213\5\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\3\54\1\214\4\54\1\0"+
    "\15\54\14\0\6\54\1\215\3\54\1\0\1\54\1\0"+
    "\1\54\1\216\3\54\3\0\10\54\1\0\1\54\1\217"+
    "\13\54\14\0\4\54\1\220\5\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\15\54\36\0\1\221\53\0"+
    "\1\53\3\0\1\172\1\0\5\173\1\221\11\0\1\53"+
    "\3\0\1\172\31\0\1\222\1\223\3\0\1\224\5\0"+
    "\1\100\3\0\11\100\32\0\14\103\1\0\7\103\2\0"+
    "\1\225\40\103\14\104\1\226\7\104\2\226\1\227\40\104"+
    "\11\103\1\105\2\103\1\0\1\230\1\103\5\231\2\0"+
    "\1\225\7\103\1\105\3\103\1\230\24\103\2\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\1\232"+
    "\14\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\1\233\14\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\10\54\1\0\2\54\1\234\12\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\10\54"+
    "\1\0\7\54\1\235\5\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\4\54\1\236\3\54\1\0\15\54"+
    "\14\0\6\54\1\237\3\54\1\0\1\54\1\0\5\54"+
    "\3\0\10\54\1\0\15\54\14\0\12\54\1\0\1\54"+
    "\1\0\4\54\1\240\3\0\10\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\3\54\1\107\11\54\14\0\12\54\1\0\1\54\1\0"+
    "\1\54\1\107\3\54\3\0\1\241\3\54\1\242\3\54"+
    "\1\0\15\54\14\0\4\54\1\233\5\54\1\0\1\54"+
    "\1\0\5\54\3\0\10\54\1\0\15\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\3\54\1\243\4\54"+
    "\1\0\5\54\1\244\7\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\10\54\1\0\4\54\1\245\10\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\3\54"+
    "\1\246\4\54\1\0\15\54\14\0\6\54\1\247\3\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\5\54"+
    "\1\250\7\54\12\0\14\125\1\0\52\125\2\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\12\54"+
    "\1\113\2\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\1\251\2\54\1\252\4\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\1\253\7\54"+
    "\1\0\15\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\10\54\1\0\5\54\1\254\7\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\14\54"+
    "\1\245\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\7\54\1\255\5\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\1\256\7\54\1\0\15\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\4\54"+
    "\1\257\3\54\1\0\1\233\14\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\1\260\7\54\1\0\2\54"+
    "\1\261\12\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\2\54\1\262\5\54\1\0\15\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\4\54\1\263\3\54"+
    "\1\0\4\54\1\264\10\54\14\0\4\54\1\265\5\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\15\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\10\54"+
    "\1\0\2\54\1\266\12\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\10\54\1\0\5\54\1\267\7\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\1\54"+
    "\1\270\6\54\1\0\15\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\3\54\1\271\4\54\1\0\15\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\10\54"+
    "\1\0\5\54\1\272\1\54\1\273\5\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\4\54"+
    "\1\264\10\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\4\54\1\274\3\54\1\0\15\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\4\54\1\107\3\54"+
    "\1\0\15\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\10\54\1\0\10\54\1\275\4\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\2\54"+
    "\1\276\12\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\10\54\1\0\2\54\1\277\12\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\4\54\1\300\3\54"+
    "\1\0\15\54\75\0\1\56\34\0\1\301\102\0\1\302"+
    "\63\0\1\303\66\0\1\304\34\0\1\305\20\0\1\306"+
    "\1\307\63\0\1\310\57\0\1\311\46\0\37\170\1\0"+
    "\27\170\56\312\1\313\10\312\4\0\1\210\4\0\1\314"+
    "\4\0\1\210\5\173\12\0\1\314\32\0\2\54\1\315"+
    "\4\54\1\316\2\54\1\0\1\54\1\210\5\175\3\0"+
    "\7\54\1\316\1\0\15\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\2\54\1\204\5\54\1\0\15\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\1\317"+
    "\7\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\6\54\1\320\6\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\2\54\1\321"+
    "\5\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\7\54\1\322\5\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\4\54\1\323"+
    "\3\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\13\54\1\323\1\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\11\54\1\107\3\54\17\0\2\324\2\325\1\206\3\0"+
    "\1\326\1\0\3\207\2\173\3\0\2\207\4\0\1\207"+
    "\1\206\2\0\1\207\1\326\31\0\2\324\2\325\1\207"+
    "\3\0\1\207\1\0\3\207\5\0\2\207\4\0\2\207"+
    "\2\0\2\207\35\0\1\314\5\0\5\173\12\0\1\314"+
    "\32\0\12\54\1\0\1\54\1\0\5\54\3\0\1\203"+
    "\7\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\2\54\1\327\12\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\1\330\7\54"+
    "\1\0\15\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\10\54\1\0\2\54\1\331\12\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\2\54"+
    "\1\332\12\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\1\333\7\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\5\54\1\334"+
    "\7\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\1\54\1\335\6\54\1\0\15\54\23\0\1\336\3\0"+
    "\1\336\1\0\3\336\5\0\2\336\4\0\2\336\2\0"+
    "\2\336\35\0\1\337\3\0\1\337\1\0\3\337\5\0"+
    "\2\337\4\0\2\337\2\0\2\337\35\0\1\340\3\0"+
    "\1\340\1\0\3\340\5\0\2\340\4\0\2\340\2\0"+
    "\2\340\24\0\26\226\1\341\40\226\14\103\1\0\7\103"+
    "\2\0\1\342\44\103\1\343\4\103\1\344\2\103\1\0"+
    "\1\103\1\343\5\231\2\0\1\225\7\103\1\344\30\103"+
    "\2\0\12\54\1\0\1\54\1\0\5\54\3\0\4\54"+
    "\1\345\3\54\1\0\15\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\10\54\1\0\2\54\1\107\12\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\1\205"+
    "\7\54\1\0\15\54\14\0\6\54\1\323\3\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\2\54\1\323\12\54\14\0\6\54\1\107\3\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\2\54\1\346\12\54\14\0\12\54\1\0\1\54\1\0"+
    "\2\54\1\347\2\54\3\0\10\54\1\0\15\54\14\0"+
    "\4\54\1\350\5\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\7\54\1\116\5\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\1\107\14\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\10\54\1\0\2\54\1\351\12\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\4\54\1\352\3\54"+
    "\1\0\15\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\1\353\7\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\2\54\1\323\2\54\3\0\10\54\1\0"+
    "\15\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\4\54\1\354\3\54\1\0\1\54\1\355\13\54\14\0"+
    "\4\54\1\356\5\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\5\54\1\176\7\54\14\0\6\54\1\212"+
    "\3\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\15\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\4\54\1\257\3\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\3\54\1\203\4\54\1\0"+
    "\15\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\1\244\14\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\10\54\1\0\1\54\1\357\13\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\3\54"+
    "\1\323\4\54\1\0\15\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\10\54\1\0\1\54\1\360\13\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\4\54"+
    "\1\361\3\54\1\0\1\152\14\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\2\54\1\350"+
    "\12\54\14\0\6\54\1\362\3\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\4\54\1\107\3\0\10\54\1\0\15\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\2\54"+
    "\1\152\5\54\1\0\15\54\14\0\6\54\1\233\3\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\15\54"+
    "\14\0\6\54\1\354\3\54\1\0\1\54\1\0\5\54"+
    "\3\0\10\54\1\0\15\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\1\363\7\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\5\54\1\364"+
    "\2\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\4\54\1\365\3\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\2\54\1\366\12\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\2\54\1\356\12\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\3\54\1\367"+
    "\4\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\3\54\1\370\4\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\7\54\1\107\5\54\33\0\1\371\76\0\1\372\55\0"+
    "\1\161\121\0\1\373\53\0\1\372\4\0\1\166\42\0"+
    "\1\374\77\0\1\375\66\0\1\376\34\0\14\311\1\377"+
    "\52\311\56\312\1\167\10\312\17\0\5\173\45\0\7\54"+
    "\1\316\2\54\1\0\1\54\1\0\5\175\3\0\7\54"+
    "\1\316\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\175\3\0\10\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\1\54\1\233\3\54\3\0\10\54\1\0"+
    "\15\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\2\54\1\261\12\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\13\54\1\107"+
    "\1\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\3\54\1\152\4\54\1\0\15\54\21\0\2\173\63\0"+
    "\2\173\64\0\1\210\2\324\2\325\1\u0100\3\0\1\207"+
    "\1\210\3\207\2\173\3\0\2\207\4\0\1\207\1\u0100"+
    "\2\0\2\207\26\0\12\54\1\0\1\54\1\0\2\54"+
    "\1\107\2\54\3\0\10\54\1\0\15\54\14\0\6\54"+
    "\1\u0101\3\54\1\0\1\54\1\0\5\54\3\0\10\54"+
    "\1\0\15\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\1\257\7\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\13\54\1\364"+
    "\1\54\14\0\4\54\1\u0102\5\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\4\54\1\u0103\3\0\10\54\1\0\15\54"+
    "\14\0\6\54\1\236\3\54\1\0\1\54\1\0\5\54"+
    "\3\0\10\54\1\0\15\54\23\0\1\u0104\3\0\1\u0104"+
    "\1\0\3\u0104\5\0\2\u0104\4\0\2\u0104\2\0\2\u0104"+
    "\35\0\1\u0105\3\0\1\u0105\1\0\3\u0105\5\0\2\u0105"+
    "\4\0\2\u0105\2\0\2\u0105\35\0\1\u0106\3\0\1\u0106"+
    "\1\0\3\u0106\2\0\1\221\2\0\2\u0106\4\0\2\u0106"+
    "\2\0\2\u0106\52\0\1\226\40\0\11\103\1\344\2\103"+
    "\1\0\2\103\5\231\2\0\1\225\7\103\1\344\44\103"+
    "\1\0\2\103\5\231\2\0\1\225\40\103\2\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\3\54\1\u0107\4\54"+
    "\1\0\15\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\10\54\1\0\1\u0108\14\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\7\54\1\u0109"+
    "\5\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\3\54\1\u010a\4\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\7\54\1\u010b"+
    "\5\54\14\0\4\54\1\u0103\5\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\4\54\1\144\3\54\1\0"+
    "\15\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\5\54\1\u010c\7\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\11\54\1\u010d"+
    "\3\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\1\54\1\152\13\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\6\54\1\107"+
    "\6\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\11\54\1\212\3\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\5\54\1\u010e"+
    "\7\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\5\54\1\u010f\7\54\14\0\12\54\1\0"+
    "\1\54\1\0\4\54\1\244\3\0\10\54\1\0\15\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\1\u0110"+
    "\7\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\2\54\1\u0111\12\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\3\54\1\u0112"+
    "\4\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\3\54\1\u0113\4\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\1\u0114\7\54"+
    "\1\0\15\54\54\0\1\166\66\0\1\311\71\0\1\u0115"+
    "\53\0\1\163\12\0\1\166\70\0\1\u0116\50\0\1\u0117"+
    "\42\0\2\324\2\325\1\207\3\0\1\207\1\0\3\207"+
    "\2\173\3\0\2\207\4\0\2\207\2\0\2\207\26\0"+
    "\6\54\1\u0118\3\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\15\54\14\0\6\54\1\152\3\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\1\237\7\54"+
    "\1\0\15\54\23\0\1\u0119\3\0\1\u0119\1\0\3\u0119"+
    "\5\0\2\u0119\4\0\2\u0119\2\0\2\u0119\35\0\1\u011a"+
    "\3\0\1\u011a\1\0\3\u011a\5\0\2\u011a\4\0\2\u011a"+
    "\2\0\2\u011a\35\0\1\u011b\3\0\1\u011b\1\0\3\u011b"+
    "\2\0\1\221\2\0\2\u011b\4\0\2\u011b\2\0\2\u011b"+
    "\26\0\12\54\1\0\1\54\1\0\5\54\3\0\1\356"+
    "\7\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\4\54\1\u011c\10\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\2\54\1\u0101"+
    "\5\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\2\54\1\107\5\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\1\54\1\107\3\54\3\0"+
    "\10\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\1\54\1\107\13\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\1\u011d\7\54"+
    "\1\0\15\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\2\54\1\120\5\54\1\0\15\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\1\54"+
    "\1\u011e\13\54\14\0\12\54\1\0\1\54\1\0\5\54"+
    "\3\0\4\54\1\233\3\54\1\0\15\54\14\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\1\54"+
    "\1\u011f\13\54\14\0\12\54\1\0\1\54\1\0\1\54"+
    "\1\u011c\3\54\3\0\2\54\1\u0103\5\54\1\0\15\54"+
    "\14\0\12\54\1\0\1\54\1\0\5\54\3\0\10\54"+
    "\1\0\5\54\1\u0120\7\54\14\0\12\54\1\0\1\54"+
    "\1\0\5\54\3\0\4\54\1\u0121\3\54\1\0\15\54"+
    "\61\0\1\u0122\51\0\1\311\101\0\1\u0123\23\0\12\54"+
    "\1\0\1\54\1\0\5\54\3\0\10\54\1\0\12\54"+
    "\1\107\2\54\23\0\1\223\3\0\1\223\1\0\3\223"+
    "\5\0\2\223\4\0\2\223\2\0\2\223\35\0\1\100"+
    "\3\0\1\100\1\0\3\100\5\0\2\100\4\0\2\100"+
    "\2\0\2\100\35\0\1\100\3\0\1\100\1\0\3\100"+
    "\2\0\1\221\2\0\2\100\4\0\2\100\2\0\2\100"+
    "\26\0\12\54\1\0\1\54\1\0\5\54\3\0\1\u0124"+
    "\7\54\1\0\15\54\14\0\6\54\1\u0125\3\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\10\54\1\0"+
    "\5\54\1\152\7\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\4\54\1\212\3\54\1\0\15\54\14\0"+
    "\12\54\1\0\1\54\1\0\2\54\1\u0126\2\54\3\0"+
    "\10\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\7\54\1\u0127\5\54\43\0"+
    "\1\311\66\0\1\u0128\37\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\1\54\1\233\13\54\14\0"+
    "\6\54\1\u0129\3\54\1\0\1\54\1\0\5\54\3\0"+
    "\10\54\1\0\15\54\14\0\12\54\1\0\1\54\1\0"+
    "\5\54\3\0\10\54\1\0\2\54\1\u012a\12\54\14\0"+
    "\12\54\1\0\1\54\1\0\5\54\3\0\3\54\1\107"+
    "\4\54\1\0\15\54\65\0\1\311\15\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\10\54\1\0\7\54\1\u010c"+
    "\5\54\14\0\12\54\1\0\1\54\1\0\5\54\3\0"+
    "\4\54\1\u012b\3\54\1\0\15\54\14\0\12\54\1\0"+
    "\1\54\1\0\5\54\3\0\3\54\1\u0118\4\54\1\0"+
    "\15\54\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15510];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\7\1\1\11\42\1\1\11\5\1"+
    "\1\0\2\1\1\0\10\1\1\0\1\1\3\0\21\1"+
    "\1\11\31\1\10\0\1\1\1\11\1\1\1\11\25\1"+
    "\1\11\3\0\1\1\1\0\52\1\13\0\22\1\3\0"+
    "\30\1\6\0\1\11\4\1\3\0\16\1\3\0\1\1"+
    "\3\0\6\1\2\0\4\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	/* styles */
	
	public static final byte PLAIN_STYLE = 1;
	public static final byte KEYWORD_STYLE = 2;
	public static final byte TYPE_STYLE = 3;
	public static final byte OPERATOR_STYLE = 4;
	public static final byte SEPARATOR_STYLE = 5;
	public static final byte STRING_LITERAL_STYLE = 61;
        public static final byte NUM_LITERAL_STYLE = 62;
        public static final byte CHAR_LITERAL_STYLE = 63;
	public static final byte COMMENT_STYLE = 7;
        public static final byte DIRECTIVE_STYLE = 8;
	
	/* Highlighter implementation */
	
	public int getStyleCount()
	{
		return 9;
	}
	
	public byte getStartState()
	{
		return YYINITIAL+1;
	}
	
	public byte getCurrentState()
	{
		return (byte) (yystate()+1);
	}
	
	public void setState(byte newState)
	{
		yybegin(newState-1);
	}
	
	public byte getNextToken()
	throws IOException
	{
		return (byte) yylex();
	}
	
	public int getTokenLength()
	{
		return yylength();
	}
	
	public void setReader(Reader r)
	{
		this.zzReader = r;
	}

	public CSharpHighlighter()
	{
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CSharpHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CSharpHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1328) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return COMMENT_STYLE;
          }
        case 13: break;
        case 2: 
          { return PLAIN_STYLE;
          }
        case 14: break;
        case 6: 
          { return KEYWORD_STYLE;
          }
        case 15: break;
        case 8: 
          { yybegin(YYINITIAL); return COMMENT_STYLE;
          }
        case 16: break;
        case 3: 
          { return OPERATOR_STYLE;
          }
        case 17: break;
        case 10: 
          { return STRING_LITERAL_STYLE;
          }
        case 18: break;
        case 5: 
          { return SEPARATOR_STYLE;
          }
        case 19: break;
        case 11: 
          { return TYPE_STYLE;
          }
        case 20: break;
        case 4: 
          { return NUM_LITERAL_STYLE;
          }
        case 21: break;
        case 7: 
          { yybegin(IN_COMMENT); return COMMENT_STYLE;
          }
        case 22: break;
        case 9: 
          { return CHAR_LITERAL_STYLE;
          }
        case 23: break;
        case 12: 
          { return DIRECTIVE_STYLE;
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
