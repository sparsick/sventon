/* The following code was generated by JFlex 1.4.1 on 02/02/08 19:43 */

/*
 * Copyright 2008 Gábor Fehér <feherga@gmail.com>
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>.
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 * $Id$
 */
package com.uwyn.jhighlight.highlighter;

import java.io.Reader;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 02/02/08 19:43 from the specification file
 * <tt>/home/gabor/NetBeansProjects/jhighlight-repo/trunk/src/com/uwyn/jhighlight/highlighter/PascalHighlighter.flex</tt>
 */
public class PascalHighlighter implements ExplicitStateHighlighter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT2 = 2;
  public static final int IN_COMMENT1 = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\50\1\0\1\0\23\0\1\35\1\55\1\0\1\51"+
    "\1\6\1\7\1\10\1\47\1\52\1\53\1\56\1\12\1\54\1\12"+
    "\1\13\1\57\2\5\2\4\1\45\1\4\1\44\1\4\2\2\1\55"+
    "\1\54\1\55\1\55\1\55\1\55\1\0\1\14\1\15\1\32\1\24"+
    "\1\11\1\3\1\26\1\37\1\27\1\40\1\31\1\20\1\25\1\23"+
    "\1\17\1\36\1\46\1\30\1\16\1\22\1\21\1\33\1\34\1\42"+
    "\1\41\1\43\1\54\1\0\1\54\1\55\1\1\1\0\1\14\1\15"+
    "\1\32\1\24\1\11\1\3\1\26\1\37\1\27\1\40\1\31\1\20"+
    "\1\25\1\23\1\17\1\36\1\46\1\30\1\16\1\22\1\21\1\33"+
    "\1\34\1\42\1\41\1\43\1\60\1\55\1\61\1\55\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\2\2\3\1\4\2\3\2\5\1\3\1\5"+
    "\1\6\25\3\1\6\2\5\1\7\1\2\1\3\1\10"+
    "\2\0\4\3\3\4\3\3\1\4\3\0\1\3\1\11"+
    "\12\3\1\12\2\3\1\11\16\3\1\11\3\3\1\11"+
    "\17\3\1\0\2\1\1\13\2\0\1\2\1\0\1\4"+
    "\40\3\1\11\22\3\2\0\1\2\2\0\11\3\1\12"+
    "\63\3\1\11\37\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\226\0\u06a4\0\226\0\u06d6\0\u0708"+
    "\0\226\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u015e"+
    "\0\u0190\0\u01c2\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u015e\0\u0190"+
    "\0\u01c2\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a"+
    "\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\310\0\u0b86\0\u0bb8"+
    "\0\310\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u125c\0\u060e\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u08fc\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482"+
    "\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612"+
    "\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2"+
    "\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932"+
    "\0\u1964\0\u1996\0\u19c8\0\u19fa\0\226\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u0640"+
    "\0\u1db0\0\226\0\u1de2\0\u0708\0\u1e14\0\u1e46\0\u1e78\0\u1eaa"+
    "\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a"+
    "\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca"+
    "\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a"+
    "\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea"+
    "\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a"+
    "\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a"+
    "\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a"+
    "\0\u29cc\0\u21fc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8"+
    "\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88"+
    "\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u0960\0\u2db4\0\u2de6"+
    "\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76"+
    "\0\u2fa8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\6\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\5\1\33\1\34\1\35\1\4\1\36\3\5\1\37"+
    "\1\5\2\6\1\40\1\41\1\4\1\42\1\43\2\15"+
    "\2\44\1\45\1\46\1\4\56\47\1\50\3\47\61\3"+
    "\1\51\63\0\5\5\3\0\1\5\2\0\21\5\1\0"+
    "\11\5\15\0\1\6\1\0\2\6\3\0\1\52\1\0"+
    "\1\53\30\0\2\6\15\0\5\5\3\0\1\5\2\0"+
    "\1\54\2\5\1\55\1\5\1\56\5\5\1\57\5\5"+
    "\1\0\11\5\15\0\4\60\3\0\1\60\2\0\2\60"+
    "\6\0\1\60\5\0\1\60\11\0\2\60\21\0\1\61"+
    "\60\0\2\62\36\0\2\62\15\0\5\5\3\0\1\5"+
    "\2\0\4\5\1\63\2\5\1\64\11\5\1\0\4\5"+
    "\1\65\4\5\15\0\1\66\1\0\2\66\1\67\1\70"+
    "\1\71\33\0\2\66\15\0\5\5\3\0\1\5\2\0"+
    "\1\5\1\72\1\73\4\5\1\74\4\5\1\75\4\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\76\2\0\3\5"+
    "\1\77\10\5\1\100\4\5\1\0\3\5\1\101\5\5"+
    "\14\0\5\5\3\0\1\102\2\0\6\5\1\103\2\5"+
    "\1\104\7\5\1\0\1\5\1\105\7\5\14\0\2\5"+
    "\1\106\2\5\3\0\1\5\2\0\1\5\1\107\3\5"+
    "\1\110\1\5\1\111\4\5\1\111\4\5\1\0\1\112"+
    "\10\5\14\0\5\5\3\0\1\5\2\0\1\113\2\5"+
    "\1\114\7\5\1\115\5\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\2\5\1\116\4\5\1\117\11\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\120\2\0\3\5"+
    "\1\111\10\5\1\121\4\5\1\0\1\5\1\122\1\5"+
    "\1\123\5\5\14\0\5\5\3\0\1\124\2\0\1\125"+
    "\2\5\1\110\7\5\1\126\5\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\127\2\0\3\5\1\130\7\5\1\131"+
    "\5\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\3\5\1\64\15\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\3\5\1\132\15\5\1\0\11\5\14\0"+
    "\2\5\1\133\2\5\3\0\1\5\2\0\2\5\1\111"+
    "\4\5\1\134\1\5\1\135\7\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\136\2\0\1\137\20\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\1\140\2\5\1\141"+
    "\1\142\14\5\1\0\1\5\1\143\7\5\14\0\5\5"+
    "\3\0\1\5\2\0\1\55\20\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\3\5\1\144\7\5\1\145"+
    "\5\5\1\0\1\5\1\146\7\5\14\0\5\5\3\0"+
    "\1\5\2\0\1\147\2\5\1\150\10\5\1\151\1\5"+
    "\1\152\2\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\3\5\1\55\15\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\20\5\1\153\1\0\11\5\13\0"+
    "\47\154\1\155\1\0\11\154\2\0\1\156\1\0\2\156"+
    "\36\0\2\156\72\0\1\157\62\0\1\160\2\0\56\47"+
    "\1\161\3\47\53\162\1\51\6\162\2\0\1\66\1\0"+
    "\2\66\4\0\1\163\31\0\2\66\16\0\1\164\1\0"+
    "\2\164\36\0\2\164\15\0\5\5\3\0\1\5\2\0"+
    "\4\5\1\63\14\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\14\5\1\111\4\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\7\5\1\165\11\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\4\5\1\166"+
    "\2\5\1\167\11\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\2\5\1\170\16\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\10\5\1\111\10\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\13\5\1\110"+
    "\2\5\1\171\2\5\1\0\1\172\10\5\15\0\1\66"+
    "\1\0\2\66\36\0\2\66\15\0\5\5\3\0\1\5"+
    "\2\0\2\5\1\173\16\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\11\5\1\111\7\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\2\5\1\174\5\5"+
    "\1\111\10\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\14\5\1\175\4\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\12\5\1\176\6\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\3\5\1\177\15\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\200\2\0\21\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\6\5"+
    "\1\201\12\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\4\5\1\202\1\5\1\111\12\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\14\5\1\203\4\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\1\204"+
    "\20\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\3\5\1\205\1\111\7\5\1\111\4\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\21\5\1\0\2\5"+
    "\1\206\6\5\14\0\5\5\3\0\1\5\2\0\6\5"+
    "\1\111\12\5\1\0\11\5\14\0\5\5\3\0\1\207"+
    "\2\0\21\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\1\5\1\210\17\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\7\5\1\211\11\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\1\5\1\212\17\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\213\2\0\21\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\6\5"+
    "\1\214\4\5\1\110\5\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\21\5\1\0\4\5\1\215\4\5"+
    "\14\0\5\5\3\0\1\5\2\0\5\5\1\170\13\5"+
    "\1\0\3\5\1\111\5\5\14\0\5\5\3\0\1\216"+
    "\2\0\14\5\1\217\4\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\21\5\1\0\1\170\10\5\14\0"+
    "\5\5\3\0\1\5\2\0\20\5\1\111\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\11\5\1\166\7\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\4\5"+
    "\1\220\14\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\2\5\1\221\16\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\20\5\1\222\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\2\5\1\223\14\5\1\111"+
    "\1\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\6\5\1\224\12\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\21\5\1\225\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\4\5\1\226\1\5\1\227\4\5\1\230"+
    "\5\5\1\0\1\5\1\231\7\5\14\0\5\5\3\0"+
    "\1\5\2\0\21\5\1\0\1\232\10\5\14\0\5\5"+
    "\3\0\1\5\2\0\13\5\1\233\2\5\1\153\2\5"+
    "\1\0\1\234\10\5\14\0\5\5\3\0\1\5\2\0"+
    "\13\5\1\63\5\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\2\5\1\170\11\5\1\235\4\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\7\5\1\236"+
    "\11\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\1\237\20\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\1\240\20\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\14\5\1\241\4\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\6\5\1\242\1\5\1\243"+
    "\10\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\13\5\1\244\5\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\16\5\1\245\2\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\13\5\1\246\5\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\3\5\1\247"+
    "\15\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\21\5\1\0\1\5\1\143\7\5\14\0\5\5\3\0"+
    "\1\5\2\0\3\5\1\144\15\5\1\0\11\5\62\0"+
    "\1\154\1\0\1\250\12\0\1\156\1\0\2\156\36\0"+
    "\2\156\1\0\1\154\1\0\1\250\66\0\1\251\3\0"+
    "\50\160\1\252\11\160\53\162\1\0\6\162\56\253\1\254"+
    "\3\253\2\0\1\164\1\0\2\164\3\0\1\52\32\0"+
    "\2\164\15\0\5\5\3\0\1\5\2\0\16\5\1\255"+
    "\2\5\1\0\11\5\14\0\5\5\3\0\1\106\2\0"+
    "\21\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\1\256\20\5\1\0\11\5\14\0\5\5\3\0\1\111"+
    "\2\0\21\5\1\0\11\5\14\0\5\5\3\0\1\257"+
    "\2\0\21\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\3\5\1\260\15\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\3\5\1\261\15\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\13\5\1\262\5\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\1\263"+
    "\20\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\13\5\1\216\5\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\4\5\1\264\14\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\1\265\20\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\266\2\0\21\5\1\0\11\5"+
    "\14\0\2\5\1\111\2\5\3\0\1\5\2\0\21\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\13\5"+
    "\1\267\5\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\4\5\1\270\14\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\14\5\1\271\4\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\272\2\0\21\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\14\5\1\273\4\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\274\2\0\21\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\12\5"+
    "\1\275\6\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\14\5\1\276\4\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\2\5\1\111\16\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\13\5\1\274\5\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\6\5"+
    "\1\106\12\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\7\5\1\111\11\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\277\2\0\21\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\7\5\1\300\11\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\6\5\1\301\12\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\7\5"+
    "\1\132\11\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\21\5\1\0\1\302\10\5\14\0\5\5\3\0"+
    "\1\5\2\0\3\5\1\111\15\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\13\5\1\303\5\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\304\2\0\21\5\1\0"+
    "\6\5\1\305\2\5\14\0\5\5\3\0\1\5\2\0"+
    "\6\5\1\306\12\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\307\2\0\21\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\4\5\1\310\14\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\7\5\1\311\11\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\312\2\0\21\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\10\5\1\313"+
    "\10\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\2\5\1\314\3\5\1\315\12\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\2\5\1\213\16\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\14\5\1\106"+
    "\4\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\10\5\1\106\10\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\21\5\1\0\1\5\1\111\7\5\14\0"+
    "\5\5\3\0\1\316\2\0\21\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\4\5\1\170\14\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\15\5\1\317"+
    "\3\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\7\5\1\320\11\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\12\5\1\321\3\5\1\322\2\5\1\0"+
    "\1\323\10\5\66\0\1\252\6\0\56\253\1\161\3\253"+
    "\1\0\5\5\3\0\1\5\2\0\6\5\1\324\12\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\4\5"+
    "\1\325\14\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\21\5\1\0\1\110\10\5\14\0\5\5\3\0"+
    "\1\5\2\0\14\5\1\326\4\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\4\5\1\327\14\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\2\5\1\330"+
    "\16\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\21\5\1\0\3\5\1\106\5\5\14\0\5\5\3\0"+
    "\1\331\2\0\21\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\15\5\1\111\3\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\1\5\1\332\17\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\7\5\1\333"+
    "\11\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\4\5\1\334\14\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\6\5\1\335\12\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\16\5\1\110\2\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\1\336\20\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\4\5"+
    "\1\111\14\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\1\5\1\332\11\5\1\337\4\5\1\153\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\1\340\20\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\1\341"+
    "\20\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\3\5\1\110\15\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\14\5\1\342\4\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\3\5\1\63\15\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\7\5\1\170"+
    "\11\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\12\5\1\343\1\5\1\344\4\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\21\5\1\0\7\5\1\106"+
    "\1\5\14\0\5\5\3\0\1\5\2\0\13\5\1\345"+
    "\5\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\14\5\1\346\4\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\347\2\0\21\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\6\5\1\350\12\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\1\110\20\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\13\5\1\351\5\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\6\5"+
    "\1\352\12\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\13\5\1\353\5\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\2\5\1\330\13\5\1\152\2\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\64\2\0\21\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\6\5"+
    "\1\343\12\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\14\5\1\354\4\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\355\2\0\21\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\356\2\0\21\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\13\5\1\357\5\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\4\5\1\360\6\5"+
    "\1\361\5\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\6\5\1\213\12\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\5\5\1\362\13\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\6\5\1\103\12\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\1\363"+
    "\20\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\3\5\1\364\15\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\12\5\1\106\6\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\13\5\1\337\5\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\2\5\1\330"+
    "\10\5\1\337\5\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\6\5\1\37\12\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\7\5\1\215\11\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\14\5\1\360"+
    "\4\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\10\5\1\365\10\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\5\5\1\366\13\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\240\2\0\21\5\1\0\11\5\14\0"+
    "\2\5\1\367\2\5\3\0\1\5\2\0\21\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\1\370\20\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\13\5"+
    "\1\371\5\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\11\5\1\372\7\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\14\5\1\373\4\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\7\5\1\374\11\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\7\5"+
    "\1\375\11\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\1\376\20\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\10\5\1\377\10\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\14\5\1\u0100\4\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\3\5\1\216"+
    "\15\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\21\5\1\0\3\5\1\111\5\5\14\0\5\5\3\0"+
    "\1\5\2\0\21\5\1\0\5\5\1\u0101\3\5\14\0"+
    "\5\5\3\0\1\5\2\0\6\5\1\170\12\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\7\5\1\106"+
    "\11\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\3\5\1\u0102\15\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\17\5\1\34\1\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\16\5\1\336\2\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\1\u0103\20\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\4\5"+
    "\1\u0104\14\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\6\5\1\317\12\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\u0105\2\0\21\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\3\5\1\u0106\15\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\1\u0102\20\5\1\0"+
    "\11\5\14\0\5\5\3\0\1\5\2\0\5\5\1\170"+
    "\13\5\1\0\11\5\14\0\5\5\3\0\1\5\2\0"+
    "\5\5\1\u0107\13\5\1\0\11\5\14\0\5\5\3\0"+
    "\1\5\2\0\6\5\1\360\12\5\1\0\11\5\14\0"+
    "\5\5\3\0\1\5\2\0\1\255\20\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\4\5\1\106\14\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\16\5"+
    "\1\170\2\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\13\5\1\361\5\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\7\5\1\u0108\11\5\1\0\11\5"+
    "\14\0\5\5\3\0\1\5\2\0\10\5\1\u0109\10\5"+
    "\1\0\11\5\14\0\5\5\3\0\1\5\2\0\14\5"+
    "\1\170\4\5\1\0\11\5\14\0\5\5\3\0\1\5"+
    "\2\0\6\5\1\u0101\12\5\1\0\11\5\14\0\5\5"+
    "\3\0\1\5\2\0\5\5\1\u0103\13\5\1\0\11\5"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12250];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\10\1\1\11\26\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\0\13\1\3\0\62\1\1\0\3\1"+
    "\2\0\1\1\1\0\41\1\1\11\22\1\2\0\1\11"+
    "\2\0\135\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	/* styles */
	
	public static final byte PLAIN_STYLE = 1;
	public static final byte KEYWORD_STYLE = 2;
	public static final byte TYPE_STYLE = 3;
	public static final byte OPERATOR_STYLE = 4;
	public static final byte SEPARATOR_STYLE = 5;
	public static final byte STRING_LITERAL_STYLE = 61;
        public static final byte NUM_LITERAL_STYLE = 62;
	public static final byte COMMENT_STYLE = 7;
	
	/* Highlighter implementation */
	
	public int getStyleCount()
	{
		return 9;
	}
	
	public byte getStartState()
	{
		return YYINITIAL+1;
	}
	
	public byte getCurrentState()
	{
		return (byte) (yystate()+1);
	}
	
	public void setState(byte newState)
	{
		yybegin(newState-1);
	}
	
	public byte getNextToken()
	throws IOException
	{
		return (byte) yylex();
	}
	
	public int getTokenLength()
	{
		return yylength();
	}
	
	public void setReader(Reader r)
	{
		this.zzReader = r;
	}

	public PascalHighlighter()
	{
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PascalHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PascalHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { yybegin(IN_COMMENT1); return COMMENT_STYLE;
          }
        case 12: break;
        case 2: 
          { return COMMENT_STYLE;
          }
        case 13: break;
        case 7: 
          { yybegin(IN_COMMENT2);  return COMMENT_STYLE;
          }
        case 14: break;
        case 3: 
          { return PLAIN_STYLE;
          }
        case 15: break;
        case 9: 
          { return KEYWORD_STYLE;
          }
        case 16: break;
        case 8: 
          { yybegin(YYINITIAL); return COMMENT_STYLE;
          }
        case 17: break;
        case 5: 
          { return OPERATOR_STYLE;
          }
        case 18: break;
        case 6: 
          { return SEPARATOR_STYLE;
          }
        case 19: break;
        case 1: 
          { return STRING_LITERAL_STYLE;
          }
        case 20: break;
        case 10: 
          { return TYPE_STYLE;
          }
        case 21: break;
        case 4: 
          { return NUM_LITERAL_STYLE;
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
